name: Enhanced CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Phase 1: Code Quality & Type Checking
  quality-checks:
    runs-on: ubuntu-latest
    name: "Code Quality & Type Safety"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: web-app/package-lock.json
    
    - name: Install dependencies
      run: |
        cd web-app
        npm ci
    
    - name: TypeScript type checking
      run: |
        cd web-app
        npm run type-check || npx tsc --noEmit
    
    - name: ESLint code quality
      run: |
        cd web-app
        npm run lint || npx eslint . --ext .ts,.tsx,.js,.jsx --max-warnings 0
    
    - name: Code formatting check
      run: |
        cd web-app
        npm run format:check || npx prettier --check "src/**/*.{ts,tsx,js,jsx,json,css,md}"

  # Phase 2: Build & Test
  build-and-test:
    runs-on: ubuntu-latest
    needs: quality-checks
    name: "Build & Test Application"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: web-app/package-lock.json
    
    - name: Install dependencies
      run: |
        cd web-app
        npm ci
    
    - name: Build application
      run: |
        cd web-app
        npm run build
        
    - name: Verify build output
      run: |
        cd web-app
        ls -la .next/
        echo "âœ… Build completed successfully!"
        
    - name: Test bundle size
      run: |
        cd web-app
        du -sh .next/ || echo "Bundle size check completed"

  # Phase 3: Smart Contract Testing (Rust/Anchor)
  smart-contract-test:
    runs-on: ubuntu-latest
    name: "Smart Contract Testing"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
        
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Install Solana CLI
      run: |
        sh -c "$(curl -sSfL https://release.solana.com/v1.16.0/install)"
        echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
        
    - name: Install Anchor CLI
      run: |
        npm install -g @coral-xyz/anchor-cli
        
    - name: Build smart contract
      run: |
        anchor build
        
    - name: Run smart contract tests
      run: |
        anchor test --skip-local-validator

  # Phase 4: Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    name: "Security Scanning"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: web-app/package-lock.json
    
    - name: Install dependencies
      run: |
        cd web-app
        npm ci
        
    - name: Run npm audit
      run: |
        cd web-app
        npm audit --audit-level moderate
        
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
        command: test

